var svgWidth = 960;
var svgHeight = 500;

var margin = {
  top: 20,
  right: 40,
  bottom: 60,
  left: 100
};

var width = svgWidth - margin.left - margin.right;
var height = svgHeight - margin.top - margin.bottom;

console.log("Entering app.js");

// Create an SVG wrapper, append an SVG group that will hold our chart, and shift the latter by left and top margins.
var svg = d3.select(".chart")
  .append("svg")
  .attr("width", svgWidth)
  .attr("height", svgHeight);

var chartGroup = svg.append("g")
  .attr("transform", `translate(${margin.left}, ${margin.top})`);

    // Create axes labels
    chartGroup.append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 0 - margin.left + 40)
      .attr("x", 0 - (height / 2))
      .attr("dy", "1em")
      .attr("style", "font-weight:bold")
      .attr("class", "axisText")
      .text("Lacks Healthcare (%)");

    chartGroup.append("text")
      .attr("transform", `translate(${width / 2}, ${height + margin.top + 30})`)
      .attr("style", "font-weight:bold")
      .attr("class", "axisText")
      .text("In Poverty (%)");

// Import Data
console.log("Loading data...");
d3.csv("assets/data/data.csv").then(function(povertyData) {
console.log("Data loaded...");

    // Step 1: Parse Data/Cast as numbers
    // ==============================
    povertyData.forEach(function(data) {
      data.poverty = +data.poverty;
      data.healthcare = +data.healthcare;
    });

    // Step 2: Create scale functions
    // ==============================
    var xLinearScale = d3.scaleLinear()
      .domain([d3.min(povertyData, d => d.poverty) * 0.9,
        d3.max(povertyData, d => d.poverty) * 1.1])
      .range([0, width]);

    var yLinearScale = d3.scaleLinear()
      .domain([d3.min(povertyData, d => d.healthcare) * 0.9, 
        d3.max(povertyData, d => d.healthcare)])
      .range([height, 0]);

    // Step 3: Create axis functions
    // ==============================
    var bottomAxis = d3.axisBottom(xLinearScale);
    var leftAxis = d3.axisLeft(yLinearScale);

    // Step 4: Append Axes to the chart
    // ==============================
    chartGroup.append("g")
      .attr("transform", `translate(0, ${height})`)
      .call(bottomAxis);

    chartGroup.append("g")
      .call(leftAxis);

    // Step 5: Create Circles
    // ==============================
    var circlesGroup = chartGroup.selectAll("circle")
      .data(povertyData)
      .enter()
      .append("circle")
      .attr("cx", d => xLinearScale(d.poverty))
      .attr("cy", d => yLinearScale(d.healthcare))
      .attr("r", "15")
      .attr("fill", "lightblue")
      .attr("stroke", "black")
      .attr("class", "circleText")
      .attr("opacity", ".75");

    // append state abbreviation to the circles
    circlesGroup.selectAll("circle")
      .data(povertyData)
      .enter()
      .append('text')
      .html(function(d){
        return (`${d.state}`);
      })
      .attr('color', 'black')
      .attr('font-size', 15);

    console.log("Scatter chart built");      

    // Step 6: Initialize tool tip
    // ==============================
//    var toolTip = d3.tip()
//      .attr("class", "d3-tip")
//      .offset([80, -60])
//      .html(function(d) {
//        return (`${d.state}<br>In Poverty: ${d.poverty}%<br>Lack Healthcare: ${d.healthcare}%`);
//      });

    // Step 7: Create tooltip in the chart
    // ==============================
//    chartGroup.call(toolTip);

    // Step 8: Create event listeners to display and hide the tooltip
    // ==============================
//    circlesGroup.on("mouseover", function(data) {
//      toolTip.show(data, this);
//    })
    // onmouseout event
//      .on("mouseout", function(data, index) {
//        toolTip.hide(data);
//      });


  }).catch(function(error) {
    console.log(error);
  });
